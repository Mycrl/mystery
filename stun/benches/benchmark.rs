use stun::Decoder;
use criterion::*;

const CHANNEL_BIND: [u8; 108] = [
    0x00, 0x09, 0x00, 0x58, 0x21, 0x12, 0xa4, 0x42,
    0x35, 0x6a, 0x52, 0x42, 0x33, 0x4c, 0x65, 0x68,
    0x2b, 0x7a, 0x75, 0x52, 0x00, 0x0c, 0x00, 0x04,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x08,
    0x00, 0x01, 0xe1, 0x10, 0x5e, 0x12, 0xa4, 0x43,
    0x00, 0x06, 0x00, 0x03, 0x64, 0x65, 0x76, 0x00,
    0x00, 0x14, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
    0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00, 0x00, 0x00,
    0x00, 0x15, 0x00, 0x10, 0x6c, 0x37, 0x7a, 0x38,
    0x33, 0x6b, 0x6c, 0x36, 0x61, 0x35, 0x63, 0x73,
    0x77, 0x74, 0x74, 0x34, 0x00, 0x08, 0x00, 0x14,
    0xbd, 0xb8, 0xee, 0x7d, 0xc8, 0x9f, 0x85, 0x1b,
    0x5f, 0x18, 0x9a, 0x7b, 0x84, 0x3a, 0xfd, 0x88,
    0xde, 0x03, 0xc0, 0x34
];

const CHANNEL_DATA: [u8; 1128] = [
    0x40, 0x00, 0x04, 0x64, 0x90, 0x72, 0x33, 0x93,
    0x48, 0x11, 0x9c, 0x09, 0x42, 0xe2, 0x7e, 0xcf,
    0xbe, 0xde, 0x00, 0x03, 0x22, 0x50, 0x85, 0x1e,
    0x41, 0x00, 0x02, 0x90, 0x30, 0x00, 0x00, 0x00,
    0xee, 0xb2, 0xbc, 0xc0, 0xcc, 0x9e, 0x1d, 0xdf,
    0xfb, 0x7c, 0x3d, 0xec, 0x71, 0xaa, 0x95, 0xf0,
    0x09, 0xa7, 0x37, 0x5f, 0xe6, 0xc9, 0xe6, 0x31,
    0xae, 0x86, 0xa1, 0x69, 0x6b, 0xfa, 0x34, 0x5c,
    0x59, 0x4a, 0xb6, 0x44, 0x42, 0x7a, 0xa1, 0xed,
    0x1e, 0x56, 0x1d, 0xfb, 0x77, 0x75, 0x21, 0xfa,
    0x84, 0x13, 0x6a, 0xa0, 0x21, 0x05, 0x95, 0x94,
    0x18, 0xcf, 0x39, 0x42, 0xcc, 0xb3, 0x64, 0x7a,
    0x4b, 0xa1, 0x72, 0xd5, 0x66, 0xe7, 0x7f, 0xec,
    0xac, 0xe6, 0x68, 0x01, 0x08, 0xf2, 0x4a, 0xc6,
    0x2e, 0xb4, 0x3e, 0xaf, 0xd7, 0xa1, 0xa1, 0x4f,
    0xdb, 0xed, 0xef, 0xd5, 0xc2, 0x69, 0x29, 0x38,
    0x1d, 0xd5, 0xcf, 0xdd, 0xe4, 0xa3, 0x85, 0x10,
    0x86, 0x5f, 0xf6, 0xf9, 0xd4, 0x20, 0x38, 0x81,
    0xf7, 0x7d, 0xf6, 0x9e, 0xf1, 0x5c, 0x0a, 0xef,
    0x2a, 0xba, 0x36, 0x91, 0x67, 0x17, 0x09, 0x9d,
    0xde, 0xab, 0x14, 0x3f, 0x45, 0x63, 0xb3, 0x06,
    0x7d, 0x7f, 0xce, 0xdf, 0x31, 0x46, 0xfe, 0xd3,
    0x6b, 0xb1, 0xc8, 0xe3, 0xf6, 0x9b, 0xd1, 0x27,
    0xf9, 0x8b, 0x92, 0x84, 0x41, 0xf2, 0x7b, 0x71,
    0x15, 0x54, 0x79, 0x3c, 0xe9, 0x31, 0x71, 0x54,
    0xc3, 0x55, 0x86, 0x9d, 0x91, 0x9b, 0x47, 0x72,
    0x57, 0x43, 0x70, 0x5f, 0x35, 0x1c, 0xd2, 0xea,
    0x66, 0x51, 0x65, 0x05, 0x75, 0x8c, 0x6c, 0x38,
    0x30, 0x04, 0xfd, 0x4d, 0xda, 0xca, 0x9e, 0x11,
    0x60, 0x5c, 0x35, 0x10, 0x4c, 0x1a, 0x2e, 0xe1,
    0x93, 0xb9, 0x95, 0x91, 0x2a, 0x9e, 0x52, 0xe0,
    0x5b, 0x28, 0x5b, 0xf6, 0xd5, 0x54, 0xef, 0x36,
    0x11, 0xed, 0x00, 0x56, 0xf1, 0xe4, 0x5c, 0xd9,
    0x92, 0x68, 0xf4, 0x3a, 0xc0, 0xab, 0xfc, 0x57,
    0x0f, 0x55, 0x63, 0x6f, 0xa6, 0xf2, 0xf6, 0xbe,
    0xff, 0x2c, 0x64, 0xa7, 0x6b, 0x52, 0x84, 0x03,
    0x25, 0x73, 0x44, 0x1d, 0x9a, 0x1c, 0x1e, 0xed,
    0x05, 0x99, 0x72, 0x7c, 0xa0, 0x5c, 0x75, 0xbf,
    0xb7, 0xaf, 0xf0, 0x54, 0x5a, 0x65, 0x53, 0xf0,
    0x9d, 0xc0, 0x7b, 0x92, 0x4f, 0xdf, 0xde, 0xcf,
    0x29, 0x5c, 0x68, 0x4d, 0x1e, 0x74, 0x38, 0x84,
    0x2c, 0x5e, 0x05, 0x0c, 0xea, 0xd9, 0xef, 0xf2,
    0xb8, 0x4d, 0xee, 0x25, 0x69, 0x4b, 0x48, 0x41,
    0x2c, 0x0b, 0x40, 0xc7, 0x98, 0x0e, 0x29, 0x90,
    0xcb, 0x45, 0xd6, 0xb1, 0x54, 0xa2, 0x51, 0xa3,
    0xc2, 0x2b, 0x2b, 0x2a, 0xd3, 0x1b, 0x8f, 0x70,
    0x18, 0x16, 0x62, 0x95, 0x24, 0x37, 0x7e, 0xf1,
    0xe4, 0xf1, 0x23, 0x58, 0x94, 0x8c, 0xb7, 0x4c,
    0xef, 0x8b, 0xb4, 0x5b, 0x81, 0x4a, 0x97, 0x32,
    0x20, 0x09, 0xf5, 0x67, 0xe1, 0x20, 0x17, 0xbb,
    0x49, 0x63, 0x5c, 0x7c, 0x21, 0xe2, 0x5d, 0x50,
    0xbd, 0xd9, 0x5b, 0x34, 0x5e, 0x6e, 0xa0, 0xa6,
    0xc6, 0x8a, 0xb5, 0x0a, 0xba, 0x79, 0x24, 0x4e,
    0xa3, 0xd9, 0xed, 0xe7, 0x03, 0x09, 0x18, 0x7d,
    0x4d, 0xc6, 0x75, 0xbe, 0x15, 0x0d, 0x26, 0x71,
    0xb2, 0xff, 0x00, 0x28, 0x6f, 0x5d, 0xa7, 0x05,
    0x88, 0xb4, 0x28, 0x9d, 0x17, 0x5d, 0x76, 0x2c,
    0x93, 0xc2, 0xc9, 0x24, 0x9a, 0xdb, 0x5b, 0xf5,
    0xb2, 0x96, 0xdc, 0x02, 0xdc, 0x4e, 0x3c, 0x79,
    0xe9, 0x0d, 0x83, 0x5c, 0xdb, 0x4e, 0x58, 0xbb,
    0xa4, 0xf6, 0xce, 0xf8, 0x1b, 0xe2, 0xd7, 0x64,
    0x4e, 0x15, 0xf9, 0x49, 0x3f, 0x0b, 0x10, 0x18,
    0x02, 0x2c, 0x67, 0x17, 0x07, 0xa0, 0xc7, 0x57,
    0xce, 0x6c, 0x80, 0xe3, 0x29, 0xa2, 0xf8, 0xac,
    0xcc, 0xd1, 0x29, 0x7b, 0x8b, 0x1f, 0xf6, 0x90,
    0xdf, 0x07, 0x71, 0xa5, 0x13, 0xb8, 0x62, 0xb0,
    0xc9, 0x37, 0x86, 0x03, 0xa1, 0xaa, 0xb5, 0x72,
    0x00, 0xc2, 0x20, 0x3c, 0x15, 0xac, 0xaf, 0xd6,
    0x1a, 0x08, 0x2b, 0x7d, 0xe2, 0xa7, 0x2a, 0x05,
    0x44, 0x0a, 0xdf, 0x86, 0x35, 0x60, 0x1b, 0xa0,
    0xd0, 0xb3, 0x19, 0x8a, 0xc4, 0xf5, 0x47, 0x31,
    0xfc, 0x8c, 0x6f, 0x77, 0x14, 0x10, 0x6e, 0xfc,
    0xf9, 0x06, 0x60, 0x61, 0x10, 0xb0, 0x1a, 0x6f,
    0xa3, 0x8b, 0xbc, 0xc7, 0x8d, 0x7e, 0xea, 0x6b,
    0x66, 0x8e, 0xa5, 0x84, 0x8f, 0x5e, 0xe6, 0x7b,
    0xf3, 0x07, 0x7d, 0x86, 0x84, 0x44, 0x3c, 0xae,
    0x07, 0x32, 0x54, 0x67, 0xf6, 0x65, 0x28, 0xe6,
    0xdc, 0x7c, 0xba, 0x4c, 0x64, 0xc5, 0x86, 0xf6,
    0xf1, 0x26, 0x5b, 0xc7, 0x0f, 0xec, 0x2c, 0x46,
    0x82, 0xfe, 0x2a, 0xb5, 0x10, 0xf4, 0xdd, 0xc8,
    0xe1, 0xb0, 0xd1, 0x89, 0xcc, 0x81, 0x2c, 0x9e,
    0xb7, 0x08, 0xea, 0x19, 0xd0, 0xca, 0x03, 0x0e,
    0xcd, 0xa4, 0x57, 0x68, 0x46, 0xae, 0xd4, 0x42,
    0xb2, 0xc4, 0xcf, 0x34, 0xfb, 0xe9, 0x0a, 0xa0,
    0xfd, 0xfd, 0x6c, 0xff, 0xe9, 0x89, 0x70, 0x77,
    0x3b, 0xdc, 0x49, 0xde, 0x44, 0xb4, 0x9d, 0x28,
    0xab, 0x34, 0x61, 0x17, 0xd5, 0xa7, 0x25, 0x71,
    0x13, 0xce, 0xe0, 0xf6, 0x2f, 0x8a, 0x56, 0xdd,
    0x0e, 0x08, 0x56, 0x52, 0xf4, 0x0a, 0x7f, 0xe0,
    0x40, 0x86, 0xc1, 0x37, 0xce, 0x30, 0x52, 0xf3,
    0x1b, 0xe6, 0xbc, 0x33, 0x91, 0xb8, 0x9a, 0x97,
    0xf3, 0x9f, 0x16, 0xae, 0x39, 0xf8, 0x3f, 0x35,
    0x00, 0x4b, 0x15, 0x87, 0x71, 0x77, 0x4a, 0xed,
    0x04, 0xd9, 0xce, 0x7b, 0xee, 0x96, 0xf7, 0xef,
    0x0f, 0xed, 0x4f, 0xd6, 0xb3, 0xe4, 0xe6, 0xd5,
    0x1e, 0x41, 0xb2, 0x13, 0xf4, 0xcf, 0x95, 0x3d,
    0x97, 0x86, 0x4d, 0xff, 0x55, 0xd5, 0x6f, 0x2a,
    0x1e, 0xfd, 0xe5, 0x59, 0x47, 0x0e, 0x0f, 0x71,
    0x34, 0x66, 0x79, 0xd9, 0x5b, 0xdf, 0x08, 0xc6,
    0xc2, 0xe7, 0x1a, 0xad, 0x10, 0xe9, 0xfc, 0x50,
    0x03, 0x05, 0xf4, 0x2f, 0xe8, 0x80, 0x9c, 0x29,
    0x67, 0x7a, 0xf7, 0x53, 0xee, 0x1e, 0xce, 0x32,
    0xac, 0xef, 0xbb, 0xc0, 0x49, 0x5f, 0x27, 0x80,
    0xc0, 0x66, 0x66, 0xe6, 0x45, 0x21, 0xa2, 0x77,
    0x0e, 0xe9, 0xa6, 0xf3, 0x14, 0x38, 0xd6, 0xce,
    0x3c, 0xc4, 0xa4, 0xf7, 0xbf, 0xd9, 0x10, 0xf8,
    0x87, 0x3e, 0x8a, 0x7a, 0x7b, 0x6b, 0x9f, 0xec,
    0xd5, 0x5b, 0x3c, 0xf2, 0xc2, 0xc8, 0xe8, 0x4c,
    0xd3, 0xbf, 0x73, 0x44, 0x69, 0xb7, 0x7c, 0xe3,
    0xdb, 0xba, 0xab, 0x7e, 0x8f, 0xba, 0x57, 0x0e,
    0xaa, 0x8d, 0xa7, 0x66, 0xc1, 0x0b, 0xba, 0xc6,
    0xde, 0x48, 0xb3, 0x1b, 0x99, 0x30, 0x7b, 0xbd,
    0x13, 0x88, 0x85, 0xcd, 0x38, 0x4c, 0x97, 0x6a,
    0x40, 0xd6, 0x6f, 0x69, 0x9b, 0x62, 0xf9, 0x22,
    0x82, 0xbd, 0x6d, 0xcc, 0x51, 0x94, 0x1e, 0x68,
    0x16, 0x0b, 0x70, 0x3b, 0xf2, 0x12, 0x8a, 0xbf,
    0x9f, 0x21, 0x88, 0x8c, 0x56, 0xf0, 0x86, 0x9a,
    0x22, 0x0e, 0xbd, 0x57, 0xaa, 0x69, 0x8a, 0xfa,
    0x15, 0xb1, 0x48, 0x0c, 0xae, 0x2d, 0xec, 0x50,
    0xc4, 0x9e, 0xe7, 0x9d, 0x6a, 0x67, 0x78, 0x54,
    0x43, 0x01, 0x52, 0x05, 0x1a, 0x5e, 0xab, 0x4b,
    0x0b, 0x90, 0x70, 0x05, 0x15, 0x96, 0xe1, 0x9f,
    0xe4, 0xf3, 0x64, 0x5c, 0xd2, 0x0b, 0xfb, 0x8f,
    0x00, 0xb3, 0x42, 0x2f, 0x55, 0x58, 0x4a, 0x5c,
    0x2d, 0x83, 0x99, 0x49, 0x4a, 0x73, 0x7e, 0xfd,
    0x47, 0x2b, 0x45, 0xd3, 0xbb, 0x32, 0xed, 0x80,
    0x4e, 0xd4, 0x99, 0x14, 0x9c, 0x9a, 0x46, 0xe7,
    0x59, 0xf6, 0xf9, 0x2c, 0x99, 0x5c, 0xde, 0x2b,
    0x4c, 0x76, 0x1a, 0x2b, 0xd0, 0x11, 0xc0, 0x1f,
    0x75, 0x3a, 0xb5, 0x9e, 0x30, 0x38, 0x54, 0x59,
    0xc5, 0x7a, 0x08, 0xa6, 0xe7, 0x7f, 0xd2, 0x51,
    0x1b, 0xea, 0x5b, 0xdb, 0x78, 0xb4, 0xde, 0x54,
    0x79, 0xc8, 0x29, 0xf7, 0x8b, 0x41, 0xf9, 0x57,
    0x1d, 0x67, 0x08, 0x5c, 0x85, 0xc6, 0x29, 0xe4,
    0x01, 0x0c, 0x2c, 0x47, 0x28, 0xa1, 0x71, 0xb7,
    0x7a, 0xe3, 0xe6, 0x16, 0x52, 0x4c, 0x3f, 0x50,
    0x57, 0x06, 0xdc, 0xe3, 0x57, 0xed, 0xf8, 0x3f,
    0x2c, 0x94, 0xca, 0x1b, 0xa2, 0x39, 0x2e, 0xbe,
    0x2e, 0xa1, 0x45, 0x65, 0xc2, 0x91, 0x10, 0x95,
    0x95, 0x20, 0xd5, 0xb6, 0x30, 0xe5, 0xba, 0x81,
    0xec, 0x47, 0x60, 0x34, 0xbc, 0xf5, 0xd4, 0x21
];

fn criterion_benchmark(c: &mut Criterion) {
    let mut group = c.benchmark_group("stun_decoder");
    let mut codec = Decoder::new();

    let channel_bind = &CHANNEL_BIND[..];
    let channel_data = &CHANNEL_DATA[..];

    group.throughput(Throughput::Bytes(channel_bind.len() as u64));
    group.bench_function("decoder_channel_bind", |b| b.iter(|| {
        codec.decode(channel_bind).unwrap();
    }));

    group.throughput(Throughput::Bytes(channel_data.len() as u64));
    group.bench_function("decoder_channel_data", |b| b.iter(|| {
        codec.decode(channel_data).unwrap();
    }));
    
    group.finish();
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
